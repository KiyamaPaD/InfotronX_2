const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.getElementById('container').appendChild(renderer.domElement);

// Add lighting to the scene
const ambientLight = new THREE.AmbientLight(0xffffff, 0.3); // soft white light
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
directionalLight.position.set(1, 1, 1).normalize();
scene.add(directionalLight);

// Load the GLTF model using GLTFLoader
const loader = new THREE.GLTFLoader();
loader.load('./Model5.glb', function(gltf) {
    const model = gltf.scene;
    model.scale.set(1, 1, 1); // Adjust scale as necessary
    model.position.set(0, 0, 0); // Adjust position as necessary
    scene.add(model);

    animate(); // Start animation/render loop
}, undefined, function(error) {
    console.error('An error occurred while loading the model:', error);
});

// Setup OrbitControls to allow rotation and zoom
const controls = new THREE.OrbitControls(camera, renderer.domElement);
camera.position.set(100, 100, 200); // Adjust camera position (z = 5 means zoomed out)

// Update the controls in the render loop
controls.update();

// Handle window resizing
window.addEventListener('resize', function() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
});

// Animation loop for rendering
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}